<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

    <!--    %c        输出所属类的全名，可在修改为 %d{Num} ,Num类名输出的维（如："org.apache.elathen.ClassName",%C{2}将输出elathen.ClassName）-->
    <!--    %d       输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}，可指定格式 如 %d{HH:mm:ss}-->
    <!--    %l        输出日志事件发生位置，包括类目名、发生线程，在代码中的行数-->
    <!--    %n       换行符-->
    <!--    %m      输出代码指定信息，如info(“message”),输出message-->
    <!--    %p       输出优先级，即 FATAL ,ERROR 等-->
    <!--    %r        输出从启动到显示该log信息所耗费的毫秒数-->
    <!--    %t        输出产生该日志事件的线程名-->

    <!-- 日志输出到控制台 -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">

            <param name="ConversionPattern" value="%L[%t][%p][%l]${JAVA_HOME}[%d{yyyy-MM-dd HH:mm:ss SSS}]-[%m]%n"/>
        </layout>

        <!--过滤器设置输出的级别-->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <!-- 优先级从低到高分别是DEBUG,INFO,WARN,ERROR-->
            <!-- 设置日志输出的最小级别 -->
            <!-- <param name="levelMin" value="INFO"/>-->
            <!-- 设置日志输出的最大级别 -->
            <param name="levelMax" value="ERROR"/>
        </filter>
    </appender>


    <!-- 输出日志到文件 -->
    <appender name="fileAppender" class="org.apache.log4j.FileAppender">
        <!-- 输出文件全路径名-->
        <param name="File" value="src/log/FileAppender/fileAppender.log"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件-->
        <param name="Append" value="false"/>
        <param name="Threshold" value="INFO"/>
        <!--是否启用缓存，默认false-->
        <param name="BufferedIO" value="false"/>
        <!--缓存大小，依赖上一个参数(bufferedIO), 默认缓存大小8K  -->
        <param name="BufferSize" value="512"/>
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{yyyy-MM-dd HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>


    <!-- 输出日志到文件，当文件大小达到一定阈值时，自动备份 -->
    <!-- FileAppender子类 -->
    <appender name="rollingAppender" class="org.apache.log4j.RollingFileAppender">
        <!-- 日志文件全路径名 -->
        <param name="File" value="${user.dir}/src/log/rollingAppender/RollingFileAppender.log"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件-->
        <param name="Append" value="true"/>
        <!-- 保存备份日志的最大个数，默认值是：1  -->
        <param name="MaxBackupIndex" value="1"/>
        <!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值是：10MB -->
        <param name="MaxFileSize" value="10MB"/>

        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- 日志输出格式 -->
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%m%n"/>
        </layout>
    </appender>


    <!-- FileAppender子类 error-->
    <appender name="errorAppender" class="org.apache.log4j.RollingFileAppender">
        <!-- 日志文件全路径名 -->
        <param name="File" value="${user.dir}/src/log/errorAppender/RollingFileAppenderError.log"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件-->
        <param name="Append" value="true"/>
        <!-- 保存备份日志的最大个数，默认值是：1  -->
        <param name="MaxBackupIndex" value="1"/>
        <!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值是：10MB -->
        <param name="MaxFileSize" value="10MB"/>
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- 日志输出格式 -->
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%m%n"/>
        </layout>
        <!--过滤器设置输出的级别-->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <!-- 设置日志输出的最小级别 -->
            <param name="levelMin" value="WARN"/>
            <!-- 设置日志输出的最大级别 -->
            <param name="levelMax" value="ERROR"/>
        </filter>
    </appender>


    <!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="dailyRollingAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 文件文件路径名 -->
        <param name="File" value="${user.dir}/src/log/dailyRollingAppender/dailyRollingAppender.log"/>
        <param name="Append" value="true"/>
        <!--日志备份频率每天-->
        <!--'.'yyyy-MM:每月-->
        <!--'.'yyyy-ww:每周-->
        <!--'.'yyyy-MM-dd:每天-->
        <!--'.'yyyy-MM-dd-a:每天两次-->
        <!--'.'yyyy-MM-dd-HH:每小时-->
        <!--'.'yyyy-MM-dd-HH-mm:每分钟-->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%m%n"/>
        </layout>
    </appender>


    <!--
        1. 指定logger的设置，additivity是否遵循缺省的继承机制
        2. 当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
        3. 代码中使用Logger.getLogger("logTest")获得此输出器，且不会使用根输出器
    -->

    <!--    <logger name="com.guangda.mergeFile.DemoTest" additivity="false">-->
    <!--        <level value="INFO"/>-->
    <!--        <appender-ref ref="console"/>-->
    <!--        <appender-ref ref="dailyRollingAppender"/>-->
    <!--        <appender-ref ref="errorAppender"/>-->
    <!--    </logger>-->

    <logger name="merge-dev" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="console"/>
        <appender-ref ref="rollingAppender"/>
        <!--        <appender-ref ref="dailyRollingAppender"/>-->
        <appender-ref ref="errorAppender"/>
    </logger>


    <!-- 根logger的设置，若代码中未找到指定的logger，则会根据继承机制，使用根logger-->
    <root>
<!--        <appender-ref ref="console"/>-->
        <appender-ref ref="fileAppender"/>
<!--        <appender-ref ref="rollingAppender"/>-->
<!--        <appender-ref ref="dailyRollingAppender"/>-->
    </root>

</log4j:configuration>